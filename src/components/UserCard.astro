---
import lodash from "lodash";
const { groupBy, maxBy } = lodash;

import UserCardItem from "../components/UserCardItem.astro";
import Stats from "../components/Stats.astro";
import User from "../components/User.astro";
import type {
  HandlersAchievementResponse,
  HandlersIndexResponse,
  HandlersIndexUserResponse,
} from "../myApi";

const { user, achievements, courses } = Astro.props;
const pc = (user.xpForLevel / user.xpTotalForLevel) * 100;

const getUserAchievements = (
  user: HandlersIndexUserResponse,
  achievements: HandlersIndexResponse["achievements"]
): HandlersAchievementResponse[] => {
  if (!user.userAchievements) {
    return [];
  }

  if (!achievements) {
    return [];
  }

  const userAchievements = user.userAchievements.map((userAchievement) => {
    const matchedAchievement = achievements?.find(
      (a) => a.uuid === userAchievement.UUID
    );

    if (!matchedAchievement) {
      return null;
    }

    return {
      ...matchedAchievement,
      unlockedAt: userAchievement.unlockedAt,
    };
  });

  return userAchievements as HandlersAchievementResponse[];
};

const getAchievementsByCategory = (userAchievements, allAchievements) => {
  const grouped = groupBy(allAchievements, "category");

  return Object.entries(grouped).map(([category, achievements]) => {
    const sortedAchievements = achievements.sort((a, b) => a.order - b.order);

    const achievementsWithStatus = sortedAchievements.map((achievement) => {
      const userAch = userAchievements.find(
        (ua) => ua.uuid === achievement.uuid
      );
      return {
        ...achievement,
        unlockedAt: userAch ? userAch.unlockedAt : null,
        unlocked: Boolean(userAch),
      };
    });
    return { category, achievements: achievementsWithStatus };
  });
};

const ua = getUserAchievements(user, achievements);
const categoryOrder = ['milestone', 'role', 'sharpshooter', 'streak', 'boss'];
const achievementCategories = getAchievementsByCategory(ua, achievements).sort((a, b) => {
  const indexA = categoryOrder.indexOf(a.category);
  const indexB = categoryOrder.indexOf(b.category);
  return (indexA === -1 ? Infinity : indexA) - (indexB === -1 ? Infinity : indexB);
});

---

<a
  href={`/u/${user.handle}`}
  class="pt-[15px] bg-[#f2f2f2] hover:bg-[#eaeaea] dark:bg-[#0c0c0c] dark:hover:bg-[#121212] border border-black/10 dark:border-white/10 block no-underline rounded-xl w-full overflow-hidden"
>
  <div class="flex flex-col gap-2.5 p-5">
    <User
      profileImageUrl={user.profileImageURL}
      level={user.level}
      name={`${user.firstName} ${user.lastName?.[0]}.`}
      handle={user.handle}
    />
    <Stats
      level={user.level}
      xp={user.xp}
      pc={pc.toFixed(2)}
      lessons_solved={user.lessonsCompleted}
      gems={user.gems}
    />


    <div class="text-black dark:text-white text-xs font-normal text-left flex flex-col gap-4">
      {
        achievementCategories.map((categoryGroup) => {
          const unlockedAchievements = categoryGroup.achievements.filter(
            (a) => a.unlocked
          );
          const achievementToDisplay =
            unlockedAchievements.length > 0
              ? maxBy(unlockedAchievements, "order")
              : categoryGroup.achievements[0];

          return (
            <UserCardItem
              key={achievementToDisplay.uuid}
              imageURL={achievementToDisplay.imageURL}
              title={achievementToDisplay.title}
              description={achievementToDisplay.description}
              unlockedAt={achievementToDisplay.unlockedAt}
            />
          );
        })
      }
    </div>
  </div>
</a>
