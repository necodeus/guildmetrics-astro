---
import lodash from 'lodash';
const { groupBy, maxBy } = lodash;
 
import UserCardItem from "../components/UserCardItem.astro";
import Stats from "../components/Stats.astro";
import User from "../components/User.astro";
import type { HandlersAchievementResponse, HandlersCourseResponse, HandlersIndexResponse, HandlersIndexUserResponse } from '../myApi';

const { user, achievements, courses } = Astro.props;
const pc = (user.xpForLevel / user.xpTotalForLevel) * 100;

const getUserAchievements = (user: HandlersIndexUserResponse, achievements: HandlersIndexResponse['achievements']): HandlersAchievementResponse[] => {
  if (!user.userAchievements) {
    return [];
  }

  if (!achievements) {
    return [];
  }

  const userAchievements = user.userAchievements.map((userAchievement) => {
    const matchedAchievement = achievements?.find((a) => a.uuid === userAchievement.UUID);

    if (!matchedAchievement) {
      return null;
    }

    return {
      ...matchedAchievement,
      unlockedAt: userAchievement.unlockedAt,
    }
  });

  return userAchievements as HandlersAchievementResponse[];
};

const getTopAchievements = (achievements: HandlersIndexResponse['achievements']) => {
  const grouped = groupBy(achievements, 'category');
  return Object.values(grouped).map(group => maxBy(group, 'order'));
};

const getUserCourses = (user: HandlersIndexUserResponse, courses: HandlersCourseResponse[]) => {
  if (!user.userCourses) {
    return []
  };

  const userCourses = user.userCourses.map((userCourse) => {
    const matchedCourses = courses.find((c) => c.uuid === userCourse.uuid);

    return {
      ...matchedCourses,
      completedAt: userCourse.completedAt,
    }
  });

  userCourses.sort((a, b) => {
    if (!a.completedAt) return 1;
    if (!b.completedAt) return -1;
    return new Date(a.completedAt).getTime() - new Date(b.completedAt).getTime();
  });

  return userCourses;
};

const ua = getUserAchievements(user, achievements);
const userAchievements = getTopAchievements(ua);
const userCourses = getUserCourses(user, courses);
---
<a
  href={`/u/${user.handle}`}
  class="pt-[15px] bg-[#f2f2f2] hover:bg-[#eaeaea] dark:bg-[#0c0c0c] dark:hover:bg-[#121212] border border-black/10 dark:border-white/10 block no-underline rounded-xl w-full overflow-hidden"
>
  <div class="flex flex-col gap-2.5 p-5 text-center">
    <User
      profileImageUrl={user.profileImageURL}
      level={user.level}
      name={`${user.firstName} ${user.lastName?.[0]}.`}
      handle={user.handle}
    />
    <Stats
      level={user.level}
      xp={user.xp}
      pc={pc.toFixed(2)}
      lessons_solved={user.lessonsCompleted}
      gems={user.gems}
    />
    {
      userAchievements.length > 0 && (
        <div class="text-black dark:text-white text-xs font-normal text-left flex flex-col gap-4">
          {userAchievements.map((achievement: any) => {
            if (!achievement) return null;
            return <UserCardItem
              imageURL={achievement.imageURL}
              title={achievement.title}
              description={achievement.description}
              unlockedAt={achievement.unlockedAt}
            />
          })}
        </div>
      )
    }
    {
      userCourses.length > 0 && (
        <div class="text-black dark:text-white text-xs font-normal text-left flex flex-col gap-4">
          {userCourses.map((course: any) => {
            if (!course) return null;
            return <UserCardItem
              imageURL={course.thumbnailURL	}
              title={course.genericTitle}
              description={course.typeDescription}
            />
          })}
        </div>
      )
    }
  </div>
</a>
